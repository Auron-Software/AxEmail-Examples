// Created by Microsoft (R) C/C++ Compiler Version 14.00.24245.0 (c339e73c).
//
// g:\axemail\samples\visual c++\console applications\smtp\release64\axemail.tli
//
// Wrapper implementations for type library ..\..\include\AxEmail.tlb
// compiler-generated file created 04/01/22 at 06:12:48 - DO NOT EDIT!

#pragma once

//
// interface IMessage wrapper method implementations
//

inline long IMessage::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetUnsubscribeEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnsubscribeEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutUnsubscribeEmail ( _bstr_t Val ) {
    HRESULT _hr = put_UnsubscribeEmail(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetUnsubscribeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UnsubscribeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutUnsubscribeUrl ( _bstr_t Val ) {
    HRESULT _hr = put_UnsubscribeUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetFromName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutFromName ( _bstr_t Name ) {
    HRESULT _hr = put_FromName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetFromAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FromAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutFromAddress ( _bstr_t Address ) {
    HRESULT _hr = put_FromAddress(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetReplyAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReplyAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutReplyAddress ( _bstr_t Address ) {
    HRESULT _hr = put_ReplyAddress(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetReadReceiptAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReadReceiptAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutReadReceiptAddress ( _bstr_t Address ) {
    HRESULT _hr = put_ReadReceiptAddress(Address);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetOrganization ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Organization(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutOrganization ( _bstr_t Organization ) {
    HRESULT _hr = put_Organization(Organization);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutSubject ( _bstr_t Subject ) {
    HRESULT _hr = put_Subject(Subject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetBodyPlainText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BodyPlainText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutBodyPlainText ( _bstr_t Body ) {
    HRESULT _hr = put_BodyPlainText(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessage::GetBodyHtml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BodyHtml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessage::PutBodyHtml ( _bstr_t Body ) {
    HRESULT _hr = put_BodyHtml(Body);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetEncoding ( ) {
    long _result = 0;
    HRESULT _hr = get_Encoding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutEncoding ( long Encoding ) {
    HRESULT _hr = put_Encoding(Encoding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetPriority ( ) {
    long _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutPriority ( long Priority ) {
    HRESULT _hr = put_Priority(Priority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessage::GetID ( ) {
    long _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetMessageSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetMessageHeader ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MessageHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMessage::GetSize ( ) {
    long _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetDate ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Date(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetToAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ToAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetCcAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CcAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetBccAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BccAddress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessage::GetImapFlags ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ImapFlags(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMessage::GetImapUID ( ) {
    long _result = 0;
    HRESULT _hr = get_ImapUID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessage::GetImapSequenceNumber ( ) {
    long _result = 0;
    HRESULT _hr = get_ImapSequenceNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessage::PutImapSequenceNumber ( long Uid ) {
    HRESULT _hr = put_ImapSequenceNumber(Uid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMessage::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMessage::GetErrorDescription ( long lError ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(lError, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMessage::AddTo ( _bstr_t EmailAddress, _bstr_t DisplayName ) {
    HRESULT _hr = raw_AddTo(EmailAddress, DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::AddCc ( _bstr_t EmailAddress, _bstr_t DisplayName ) {
    HRESULT _hr = raw_AddCc(EmailAddress, DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::AddBcc ( _bstr_t EmailAddress, _bstr_t DisplayName ) {
    HRESULT _hr = raw_AddBcc(EmailAddress, DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessage::CountAttachments ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountAttachments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessage::GetAttachmentName ( long ID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAttachmentName(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IMessage::GetAttachmentSize ( long ID ) {
    long _result = 0;
    HRESULT _hr = raw_GetAttachmentSize(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMessage::AddAttachment ( _bstr_t FileName, _bstr_t AttachmentName, VARIANT_BOOL InlineDisposition ) {
    HRESULT _hr = raw_AddAttachment(FileName, AttachmentName, InlineDisposition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::SaveAttachment ( long ID, _bstr_t SaveAsFile ) {
    HRESULT _hr = raw_SaveAttachment(ID, SaveAsFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IMessage::ImapHasFlag ( _bstr_t Flag ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ImapHasFlag(Flag, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMessage::LoadMIME ( _bstr_t MimeFile ) {
    HRESULT _hr = raw_LoadMIME(MimeFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::SaveMIME ( _bstr_t MimeFile ) {
    HRESULT _hr = raw_SaveMIME(MimeFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::Encode ( ) {
    HRESULT _hr = raw_Encode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessage::Decode ( ) {
    HRESULT _hr = raw_Decode();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMessage::GetHeaderValue ( _bstr_t Name ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHeaderValue(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMessage::AddHeader ( _bstr_t Name, _bstr_t Value, VARIANT_BOOL Enquote ) {
    HRESULT _hr = raw_AddHeader(Name, Value, Enquote);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMessage::HtmlToPlainText ( _bstr_t Html ) {
    BSTR _result = 0;
    HRESULT _hr = raw_HtmlToPlainText(Html, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IOAuth2 wrapper method implementations
//

inline _bstr_t IOAuth2::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IOAuth2::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IOAuth2::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOAuth2::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IOAuth2::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IOAuth2::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IOAuth2::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IOAuth2::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IOAuth2::GetFlow ( ) {
    long _result = 0;
    HRESULT _hr = get_Flow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IOAuth2::GetAuthCodeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AuthCodeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetDeviceCodeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceCodeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetTokenExchangeUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TokenExchangeUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetRedirectUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RedirectUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetVerificationUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_VerificationUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetClientID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClientID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetClientSecret ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ClientSecret(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetScope ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Scope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetSuccessHtml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuccessHtml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetErrorHtml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorHtml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutFlow ( long Val ) {
    HRESULT _hr = put_Flow(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutAuthCodeUrl ( _bstr_t Val ) {
    HRESULT _hr = put_AuthCodeUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutDeviceCodeUrl ( _bstr_t Val ) {
    HRESULT _hr = put_DeviceCodeUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutTokenExchangeUrl ( _bstr_t Val ) {
    HRESULT _hr = put_TokenExchangeUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutRedirectUrl ( _bstr_t Val ) {
    HRESULT _hr = put_RedirectUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutVerificationUrl ( _bstr_t Val ) {
    HRESULT _hr = put_VerificationUrl(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutClientID ( _bstr_t Val ) {
    HRESULT _hr = put_ClientID(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutClientSecret ( _bstr_t Val ) {
    HRESULT _hr = put_ClientSecret(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutScope ( _bstr_t Val ) {
    HRESULT _hr = put_Scope(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutSuccessHtml ( _bstr_t Val ) {
    HRESULT _hr = put_SuccessHtml(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutErrorHtml ( _bstr_t Val ) {
    HRESULT _hr = put_ErrorHtml(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IOAuth2::GetAutoOpenBrowser ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoOpenBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IOAuth2::GetLoginUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LoginUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetDeviceCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DeviceCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetUserCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetUserCodeMessage ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserCodeMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetBearerToken ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BearerToken(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetRefreshToken ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RefreshToken(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IOAuth2::GetBearerExpInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_BearerExpInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IOAuth2::GetUserCodeExpInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_UserCodeExpInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IOAuth2::GetPollIntervalInSeconds ( ) {
    long _result = 0;
    HRESULT _hr = get_PollIntervalInSeconds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IOAuth2::GetLastResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetResultScope ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultScope(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetResultError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetResultErrorDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ResultErrorDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutAutoOpenBrowser ( VARIANT_BOOL Val ) {
    HRESULT _hr = put_AutoOpenBrowser(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutBearerToken ( _bstr_t Val ) {
    HRESULT _hr = put_BearerToken(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutRefreshToken ( _bstr_t Val ) {
    HRESULT _hr = put_RefreshToken(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IOAuth2::GetProxyServer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetProxyAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IOAuth2::GetProxyPassword ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProxyPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IOAuth2::PutProxyServer ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyServer(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutProxyAccount ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyAccount(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline void IOAuth2::PutProxyPassword ( _bstr_t Val ) {
    HRESULT _hr = put_ProxyPassword(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IOAuth2::Login ( ) {
    HRESULT _hr = raw_Login();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IOAuth2::WaitForTokens ( long nTimeoutMs ) {
    HRESULT _hr = raw_WaitForTokens(nTimeoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IOAuth2::RefreshBearerToken ( ) {
    HRESULT _hr = raw_RefreshBearerToken();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISmtp wrapper method implementations
//

inline _bstr_t ISmtp::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmtp::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmtp::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmtp::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISmtp::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmtp::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmtp::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ISmtp::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmtp::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmtp::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmtp::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ISmtp::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmtp::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ISmtp::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISmtp::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ISmtp::GetTimeoutConnect ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutTimeoutConnect ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutConnect(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetTimeoutAuthentication ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutAuthentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutTimeoutAuthentication ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutAuthentication(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetTimeoutCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutTimeoutCommand ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutCommand(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetTimeoutData ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutTimeoutData ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutData(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetHostPort ( ) {
    long _result = 0;
    HRESULT _hr = get_HostPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutHostPort ( long HostPort ) {
    HRESULT _hr = put_HostPort(HostPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetAuthentication ( ) {
    long _result = 0;
    HRESULT _hr = get_Authentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutAuthentication ( long Authentication ) {
    HRESULT _hr = put_Authentication(Authentication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL ISmtp::GetUseStartTls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseStartTls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutUseStartTls ( VARIANT_BOOL UseStartTls ) {
    HRESULT _hr = put_UseStartTls(UseStartTls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ISmtp::GetIpVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_IpVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ISmtp::PutIpVersion ( long IpVersion ) {
    HRESULT _hr = put_IpVersion(IpVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmtp::GetBearerToken ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BearerToken(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ISmtp::PutBearerToken ( _bstr_t Val ) {
    HRESULT _hr = put_BearerToken(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t ISmtp::GetLastSmtpResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastSmtpResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ISmtp::SetSecure ( long Port ) {
    HRESULT _hr = raw_SetSecure(Port);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmtp::Connect ( _bstr_t Host, _bstr_t Account, _bstr_t Password ) {
    HRESULT _hr = raw_Connect(Host, Account, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmtp::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISmtp::Send ( struct IMessage * Message ) {
    HRESULT _hr = raw_Send(Message);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPop3 wrapper method implementations
//

inline _bstr_t IPop3::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPop3::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPop3::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPop3::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPop3::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPop3::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPop3::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IPop3::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPop3::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPop3::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPop3::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPop3::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPop3::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IPop3::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IPop3::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IPop3::GetTimeoutConnect ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutTimeoutConnect ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutConnect(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetTimeoutAuthentication ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutAuthentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutTimeoutAuthentication ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutAuthentication(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetTimeoutCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutTimeoutCommand ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutCommand(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetTimeoutData ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutTimeoutData ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutData(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetHostPort ( ) {
    long _result = 0;
    HRESULT _hr = get_HostPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutHostPort ( long HostPort ) {
    HRESULT _hr = put_HostPort(HostPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetAuthentication ( ) {
    long _result = 0;
    HRESULT _hr = get_Authentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutAuthentication ( long Authentication ) {
    HRESULT _hr = put_Authentication(Authentication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPop3::GetIpVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_IpVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IPop3::PutIpVersion ( long IpVersion ) {
    HRESULT _hr = put_IpVersion(IpVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IPop3::GetLastPop3Response ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastPop3Response(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IPop3::GetBearerToken ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BearerToken(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPop3::PutBearerToken ( _bstr_t Val ) {
    HRESULT _hr = put_BearerToken(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IPop3::SetSecure ( long Port ) {
    HRESULT _hr = raw_SetSecure(Port);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPop3::Connect ( _bstr_t Host, _bstr_t Account, _bstr_t Password ) {
    HRESULT _hr = raw_Connect(Host, Account, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPop3::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IPop3::IsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IPop3::CountMessages ( ) {
    long _result = 0;
    HRESULT _hr = raw_CountMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IMessagePtr IPop3::GetEmailHeader ( long ID ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetEmailHeader(ID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IPop3::GetEmailMessage ( long lID ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_GetEmailMessage(lID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline HRESULT IPop3::DeleteMessage ( long ID ) {
    HRESULT _hr = raw_DeleteMessage(ID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IImapFetchData wrapper method implementations
//

inline VARIANT_BOOL IImapFetchData::GetIsTopLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTopLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IImapFetchData::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImapFetchData::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IImapFetchData::GetValueAsInt ( ) {
    long _result = 0;
    HRESULT _hr = get_ValueAsInt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImapFetchData::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IImapFetchData::GetSubDataCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetSubDataCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IImapFetchDataPtr IImapFetchData::GetSubData ( long lIdx ) {
    struct IImapFetchData * _result = 0;
    HRESULT _hr = raw_GetSubData(lIdx, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImapFetchDataPtr(_result, false);
}

inline IImapFetchDataPtr IImapFetchData::GetSubDataByName ( _bstr_t Val ) {
    struct IImapFetchData * _result = 0;
    HRESULT _hr = raw_GetSubDataByName(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImapFetchDataPtr(_result, false);
}

inline VARIANT_BOOL IImapFetchData::ContainsValue ( _bstr_t Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsValue(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL IImapFetchData::ContainsIntValue ( long Val ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ContainsIntValue(Val, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IImapFetchData::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImapFetchData::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IImap wrapper method implementations
//

inline _bstr_t IImap::GetVersion ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Version(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetBuild ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Build(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetModule ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Module(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetLicenseStatus ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetLicenseKey ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LicenseKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IImap::PutLicenseKey ( _bstr_t LicenseKey ) {
    HRESULT _hr = put_LicenseKey(LicenseKey);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IImap::SaveLicenseKey ( ) {
    HRESULT _hr = raw_SaveLicenseKey();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IImap::GetLogFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LogFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IImap::PutLogFile ( _bstr_t LogFile ) {
    HRESULT _hr = put_LogFile(LogFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IImap::GetActivityFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ActivityFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IImap::PutActivityFile ( _bstr_t ActivityFile ) {
    HRESULT _hr = put_ActivityFile(ActivityFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IImap::Sleep ( long Ms ) {
    HRESULT _hr = raw_Sleep(Ms);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IImap::GetLastError ( ) {
    long _result = 0;
    HRESULT _hr = get_LastError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImap::GetErrorDescription ( long ErrorCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetErrorDescription(ErrorCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IImap::GetTimeoutConnect ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutConnect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutTimeoutConnect ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutConnect(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetTimeoutCommand ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutCommand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutTimeoutCommand ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutCommand(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetTimeoutAppend ( ) {
    long _result = 0;
    HRESULT _hr = get_TimeoutAppend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutTimeoutAppend ( long TimoutMs ) {
    HRESULT _hr = put_TimeoutAppend(TimoutMs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetFetchMaxNumItemsAtOnce ( ) {
    long _result = 0;
    HRESULT _hr = get_FetchMaxNumItemsAtOnce(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutFetchMaxNumItemsAtOnce ( long pVal ) {
    HRESULT _hr = put_FetchMaxNumItemsAtOnce(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetMaximumPendingFetchData ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumPendingFetchData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutMaximumPendingFetchData ( long pVal ) {
    HRESULT _hr = put_MaximumPendingFetchData(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetMaximumPendingExpunged ( ) {
    long _result = 0;
    HRESULT _hr = get_MaximumPendingExpunged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutMaximumPendingExpunged ( long pVal ) {
    HRESULT _hr = put_MaximumPendingExpunged(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IImap::GetUseSequenceNumForStoreAndCopy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseSequenceNumForStoreAndCopy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutUseSequenceNumForStoreAndCopy ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_UseSequenceNumForStoreAndCopy(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetHostPort ( ) {
    long _result = 0;
    HRESULT _hr = get_HostPort(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutHostPort ( long HostPort ) {
    HRESULT _hr = put_HostPort(HostPort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetAuthentication ( ) {
    long _result = 0;
    HRESULT _hr = get_Authentication(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutAuthentication ( long Authentication ) {
    HRESULT _hr = put_Authentication(Authentication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IImap::GetUseStartTls ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_UseStartTls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutUseStartTls ( VARIANT_BOOL UseStartTls ) {
    HRESULT _hr = put_UseStartTls(UseStartTls);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IImap::GetAutoClose ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutAutoClose ( VARIANT_BOOL AutoClose ) {
    HRESULT _hr = put_AutoClose(AutoClose);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IImap::GetIpVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_IpVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutIpVersion ( long IpVersion ) {
    HRESULT _hr = put_IpVersion(IpVersion);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IImap::GetSecure ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Secure(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IImap::PutSecure ( VARIANT_BOOL pVal ) {
    HRESULT _hr = put_Secure(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IImap::GetLastImapResponse ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LastImapResponse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetHierarchySeparator ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HierarchySeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::GetCapabilities ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Capabilities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IImap::GetExists ( ) {
    long _result = 0;
    HRESULT _hr = get_Exists(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IImap::GetRecent ( ) {
    long _result = 0;
    HRESULT _hr = get_Recent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IImap::GetUnseen ( ) {
    long _result = 0;
    HRESULT _hr = get_Unseen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IImap::GetUidNext ( ) {
    long _result = 0;
    HRESULT _hr = get_UidNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImap::GetBearerToken ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BearerToken(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IImap::PutBearerToken ( _bstr_t Val ) {
    HRESULT _hr = put_BearerToken(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IImap::SetSecure ( long Port ) {
    HRESULT _hr = raw_SetSecure(Port);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Connect ( _bstr_t Host, _bstr_t Account, _bstr_t Password ) {
    HRESULT _hr = raw_Connect(Host, Account, Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IImap::IsConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_IsConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IImap::Select ( _bstr_t Mailbox ) {
    HRESULT _hr = raw_Select(Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Examine ( _bstr_t Mailbox ) {
    HRESULT _hr = raw_Examine(Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Status ( _bstr_t Mailbox ) {
    HRESULT _hr = raw_Status(Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Create ( _bstr_t MailboxName ) {
    HRESULT _hr = raw_Create(MailboxName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Delete ( _bstr_t MailboxName ) {
    HRESULT _hr = raw_Delete(MailboxName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Rename ( _bstr_t Source, _bstr_t Target ) {
    HRESULT _hr = raw_Rename(Source, Target);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Subscribe ( _bstr_t MailboxName ) {
    HRESULT _hr = raw_Subscribe(MailboxName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Unsubscribe ( _bstr_t MailboxName ) {
    HRESULT _hr = raw_Unsubscribe(MailboxName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Copy ( _bstr_t IdSet, _bstr_t Mailbox ) {
    HRESULT _hr = raw_Copy(IdSet, Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Store ( _bstr_t IdSet, _bstr_t Flags, long Option ) {
    HRESULT _hr = raw_Store(IdSet, Flags, Option);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Noop ( ) {
    HRESULT _hr = raw_Noop();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Check ( ) {
    HRESULT _hr = raw_Check();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::Expunge ( ) {
    HRESULT _hr = raw_Expunge();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IImap::GetPendingExpunged ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetPendingExpunged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IImapFetchDataPtr IImap::GetPendingFetchData ( ) {
    struct IImapFetchData * _result = 0;
    HRESULT _hr = raw_GetPendingFetchData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImapFetchDataPtr(_result, false);
}

inline HRESULT IImap::ListSubscribed ( _bstr_t Reference, _bstr_t Mailbox ) {
    HRESULT _hr = raw_ListSubscribed(Reference, Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IImap::List ( _bstr_t Reference, _bstr_t Mailbox ) {
    HRESULT _hr = raw_List(Reference, Mailbox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IImap::ListCount ( ) {
    long _result = 0;
    HRESULT _hr = raw_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImap::ListAttributes ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ListAttributes(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IImap::ListHasAttribute ( long Index, BSTR * Attribute ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_ListHasAttribute(Index, Attribute, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImap::ListName ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ListName(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IMessagePtr IImap::FetchFirstEmail ( _bstr_t Criteria ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchFirstEmail(Criteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IImap::FetchNextEmail ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNextEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IImap::FetchFirstEmailHeader ( _bstr_t Criteria ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchFirstEmailHeader(Criteria, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IMessagePtr IImap::FetchNextEmailHeader ( ) {
    struct IMessage * _result = 0;
    HRESULT _hr = raw_FetchNextEmailHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMessagePtr(_result, false);
}

inline IImapFetchDataPtr IImap::FetchFirst ( _bstr_t Criteria, _bstr_t DataItems ) {
    struct IImapFetchData * _result = 0;
    HRESULT _hr = raw_FetchFirst(Criteria, DataItems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImapFetchDataPtr(_result, false);
}

inline IImapFetchDataPtr IImap::FetchNext ( ) {
    struct IImapFetchData * _result = 0;
    HRESULT _hr = raw_FetchNext(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IImapFetchDataPtr(_result, false);
}

inline HRESULT IImap::Append ( _bstr_t Mailbox, struct IMessage * pVal, _bstr_t Flags, _bstr_t DateTime ) {
    HRESULT _hr = raw_Append(Mailbox, pVal, Flags, DateTime);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL IImap::HasCapability ( _bstr_t Capability ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasCapability(Capability, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IImap::FormatDate ( long Year, long Month, long Day ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatDate(Year, Month, Day, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IImap::FormatTime ( long Hour, long Minute, long Second, long OffsetMinute ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatTime(Hour, Minute, Second, OffsetMinute, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IConstants wrapper method implementations
//

inline long IConstants::GetEMAIL_MESSAGE_PRIORITY_HIGHEST ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_PRIORITY_HIGHEST(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_PRIORITY_HIGH ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_PRIORITY_HIGH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_PRIORITY_MEDIUM ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_PRIORITY_MEDIUM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_PRIORITY_LOW ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_PRIORITY_LOW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_PRIORITY_LOWEST ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_PRIORITY_LOWEST(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_DEFAULT ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_DEFAULT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_THAI ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_THAI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_JAPANESE ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_JAPANESE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_CHINESE_SIMP ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_CHINESE_SIMP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_KOREAN ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_KOREAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_CHINESE_TRAD ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_CHINESE_TRAD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_CENTRALEUROPE ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_CENTRALEUROPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_RUSSIAN ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_RUSSIAN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_WESTERN ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_WESTERN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_GREEK ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_GREEK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_TURKISH ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_TURKISH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_HEBREW ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_HEBREW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_ARABIC ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_ARABIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_BALTIC ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_BALTIC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_VIETNAMESE ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_VIETNAMESE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_UTF7 ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_UTF7(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetEMAIL_MESSAGE_ENCODING_UTF8 ( ) {
    long _result = 0;
    HRESULT _hr = get_EMAIL_MESSAGE_ENCODING_UTF8(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMTP_AUTH_AUTO ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTP_AUTH_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMTP_AUTH_PLAIN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTP_AUTH_PLAIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMTP_AUTH_LOGIN ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTP_AUTH_LOGIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMTP_AUTH_MD5CRAM ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTP_AUTH_MD5CRAM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetSMTP_AUTH_OAUTH2 ( ) {
    long _result = 0;
    HRESULT _hr = get_SMTP_AUTH_OAUTH2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetPOP3_AUTH_PLAIN ( ) {
    long _result = 0;
    HRESULT _hr = get_POP3_AUTH_PLAIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetPOP3_AUTH_APOP ( ) {
    long _result = 0;
    HRESULT _hr = get_POP3_AUTH_APOP(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetPOP3_AUTH_AUTO ( ) {
    long _result = 0;
    HRESULT _hr = get_POP3_AUTH_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetPOP3_AUTH_OAUTH2 ( ) {
    long _result = 0;
    HRESULT _hr = get_POP3_AUTH_OAUTH2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConstants::GetIMAP_SK_ALL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_ANSWERED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_ANSWERED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_BCC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_BCC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_BEFORE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_BEFORE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_BODY ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_BODY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_CC ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_CC(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_DELETED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_DELETED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_DRAFT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_DRAFT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_FLAGGED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_FLAGGED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_FROM ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_FROM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_HEADER ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_HEADER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_KEYWORD ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_KEYWORD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_LARGER ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_LARGER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_NEW ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_NEW(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_NOT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_NOT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_OLD ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_OLD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_ON ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_ON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_OR ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_OR(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_RECENT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_RECENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SEEN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SEEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SENTBEFORE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SENTBEFORE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SENTON ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SENTON(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SENTSINCE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SENTSINCE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SINCE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SINCE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SMALLER ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SMALLER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_SUBJECT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_SUBJECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_TEXT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_TO ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_TO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNANSWERED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNANSWERED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNDELETED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNDELETED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNDRAFT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNDRAFT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNFLAGGED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNFLAGGED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNKEYWORD ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNKEYWORD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_SK_UNSEEN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_SK_UNSEEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FM_ALL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FM_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FM_FAST ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FM_FAST(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FM_FULL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FM_FULL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_BODY ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_BODY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_HEADER ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_HEADER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_HEADER_FIELDS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_HEADER_FIELDS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_HEADER_FIELDS_NOT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_HEADER_FIELDS_NOT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_MIME ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_MIME(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_TEXT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_BODY_PEEK ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_BODY_PEEK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_BODYSTRUCTURE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_BODYSTRUCTURE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_ENVELOPE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_ENVELOPE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_FLAGS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_FLAGS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_INTERNALDATE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_INTERNALDATE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_RFC822 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_RFC822(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_RFC822_HEADER ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_RFC822_HEADER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_RFC822_SIZE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_RFC822_SIZE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_RFC822_TEXT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_RFC822_TEXT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_FDI_UID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_FDI_UID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_NOINFERIORS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_NOINFERIORS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_NOSELECT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_NOSELECT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_MARKED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_MARKED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_UNMARKED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_UNMARKED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_ALL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_ALL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_ARCHIVE ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_ARCHIVE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_DRAFTS ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_DRAFTS(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_FLAGGED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_FLAGGED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_JUNK ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_JUNK(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_SENT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_SENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_TRASH ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_TRASH(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_HASNOCHILDREN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_HASNOCHILDREN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MBX_FLAG_HASCHILDREN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MBX_FLAG_HASCHILDREN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_SEEN ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_SEEN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_ANSWERED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_ANSWERED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_FLAGGED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_FLAGGED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_DELETED ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_DELETED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_DRAFT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_DRAFT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::GetIMAP_MAIL_FLAG_RECENT ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_IMAP_MAIL_FLAG_RECENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IConstants::GetIMAP_FD_TYPE_INTEGER ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_INTEGER(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_FD_TYPE_STRING ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_STRING(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_FD_TYPE_STRING_LITERAL ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_STRING_LITERAL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_FD_TYPE_LIST ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_LIST(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_FD_TYPE_ATOM ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_ATOM(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_FD_TYPE_NIL ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_FD_TYPE_NIL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_STO_SET ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_STO_SET(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_STO_ADD ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_STO_ADD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_STO_REMOVE ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_STO_REMOVE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_STO_SILENT ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_STO_SILENT(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_AUTH_AUTO ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_AUTH_AUTO(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_AUTH_LOGIN ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_AUTH_LOGIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_AUTH_PLAIN ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_AUTH_PLAIN(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIMAP_AUTH_OAUTH2 ( ) {
    long _result = 0;
    HRESULT _hr = get_IMAP_AUTH_OAUTH2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetOAUTH2_FLOW_UNDEFINED ( ) {
    long _result = 0;
    HRESULT _hr = get_OAUTH2_FLOW_UNDEFINED(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetOAUTH2_FLOW_AUTHCODE ( ) {
    long _result = 0;
    HRESULT _hr = get_OAUTH2_FLOW_AUTHCODE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetOAUTH2_FLOW_DEVICECODE ( ) {
    long _result = 0;
    HRESULT _hr = get_OAUTH2_FLOW_DEVICECODE(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIPVERSION_4 ( ) {
    long _result = 0;
    HRESULT _hr = get_IPVERSION_4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIPVERSION_6 ( ) {
    long _result = 0;
    HRESULT _hr = get_IPVERSION_6(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IConstants::GetIPVERSION_6_4 ( ) {
    long _result = 0;
    HRESULT _hr = get_IPVERSION_6_4(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IConstants::MessagePriorityToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_MessagePriorityToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::MessageEncodingToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_MessageEncodingToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::SmtpAuthToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SmtpAuthToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::Pop3AuthToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Pop3AuthToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::ImapAuthToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ImapAuthToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::ImapFetchDataTypeToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ImapFetchDataTypeToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IConstants::ImapStoreOptionToString ( long lVal ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ImapStoreOptionToString(lVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}
