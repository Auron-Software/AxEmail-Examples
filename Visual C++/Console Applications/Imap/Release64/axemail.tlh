// Created by Microsoft (R) C/C++ Compiler Version 14.00.24245.0 (3d6b9311).
//
// g:\axemail\samples\visual c++\console applications\imap\release64\axemail.tlh
//
// C++ source equivalent of type library ..\..\include\AxEmail.tlb
// compiler-generated file created 04/01/22 at 06:12:50 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace AxEmail {

//
// Forward references and typedefs
//

struct __declspec(uuid("3bcf1b58-7071-4564-9d1d-fa008b19179a"))
/* LIBID */ __AxEmail;
struct /* coclass */ Message;
struct __declspec(uuid("cc87528f-d4bf-4bfe-8df7-9bfb57d33810"))
/* dual interface */ IMessage;
struct /* coclass */ OAuth2;
struct __declspec(uuid("ffb7e17f-ef95-437e-bb93-ef506948ad18"))
/* dual interface */ IOAuth2;
struct /* coclass */ Smtp;
struct __declspec(uuid("fe73ae95-a7c6-4e98-8af2-cab94aae743a"))
/* dual interface */ ISmtp;
struct /* coclass */ Pop3;
struct __declspec(uuid("7d24a1b3-4808-4208-9a9f-2a281256744a"))
/* dual interface */ IPop3;
struct /* coclass */ ImapFetchData;
struct __declspec(uuid("e867b037-8b16-4c91-b4f3-91a5a5b9032f"))
/* dual interface */ IImapFetchData;
struct /* coclass */ Imap;
struct __declspec(uuid("2f17d77b-374d-431e-8772-8fd1b20d1516"))
/* dual interface */ IImap;
struct /* coclass */ Constants;
struct __declspec(uuid("ad78421f-9eca-4bfd-81e6-94712d62defd"))
/* dual interface */ IConstants;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IMessage, __uuidof(IMessage));
_COM_SMARTPTR_TYPEDEF(IOAuth2, __uuidof(IOAuth2));
_COM_SMARTPTR_TYPEDEF(ISmtp, __uuidof(ISmtp));
_COM_SMARTPTR_TYPEDEF(IPop3, __uuidof(IPop3));
_COM_SMARTPTR_TYPEDEF(IImapFetchData, __uuidof(IImapFetchData));
_COM_SMARTPTR_TYPEDEF(IImap, __uuidof(IImap));
_COM_SMARTPTR_TYPEDEF(IConstants, __uuidof(IConstants));

//
// Type library items
//

struct __declspec(uuid("1a9cf5c5-c6e4-48b1-910a-74437ba16414"))
Message;
    // [ default ] interface IMessage

struct __declspec(uuid("cc87528f-d4bf-4bfe-8df7-9bfb57d33810"))
IMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetFromName,put=PutFromName))
    _bstr_t FromName;
    __declspec(property(get=GetFromAddress,put=PutFromAddress))
    _bstr_t FromAddress;
    __declspec(property(get=GetReplyAddress,put=PutReplyAddress))
    _bstr_t ReplyAddress;
    __declspec(property(get=GetReadReceiptAddress,put=PutReadReceiptAddress))
    _bstr_t ReadReceiptAddress;
    __declspec(property(get=GetOrganization,put=PutOrganization))
    _bstr_t Organization;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetBodyPlainText,put=PutBodyPlainText))
    _bstr_t BodyPlainText;
    __declspec(property(get=GetBodyHtml,put=PutBodyHtml))
    _bstr_t BodyHtml;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    long Encoding;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=GetMessageSource))
    _bstr_t MessageSource;
    __declspec(property(get=GetMessageHeader))
    _bstr_t MessageHeader;
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetDate))
    _bstr_t Date;
    __declspec(property(get=GetToAddress))
    _bstr_t ToAddress;
    __declspec(property(get=GetCcAddress))
    _bstr_t CcAddress;
    __declspec(property(get=GetBccAddress))
    _bstr_t BccAddress;
    __declspec(property(get=GetImapFlags))
    _bstr_t ImapFlags;
    __declspec(property(get=GetImapUID))
    long ImapUID;
    __declspec(property(get=GetImapSequenceNumber,put=PutImapSequenceNumber))
    long ImapSequenceNumber;
    __declspec(property(get=GetUnsubscribeEmail,put=PutUnsubscribeEmail))
    _bstr_t UnsubscribeEmail;
    __declspec(property(get=GetUnsubscribeUrl,put=PutUnsubscribeUrl))
    _bstr_t UnsubscribeUrl;

    //
    // Wrapper methods for error-handling
    //

    long GetLastError ( );
    _bstr_t GetUnsubscribeEmail ( );
    void PutUnsubscribeEmail (
        _bstr_t Val );
    _bstr_t GetUnsubscribeUrl ( );
    void PutUnsubscribeUrl (
        _bstr_t Val );
    _bstr_t GetFromName ( );
    void PutFromName (
        _bstr_t Name );
    _bstr_t GetFromAddress ( );
    void PutFromAddress (
        _bstr_t Address );
    _bstr_t GetReplyAddress ( );
    void PutReplyAddress (
        _bstr_t Address );
    _bstr_t GetReadReceiptAddress ( );
    void PutReadReceiptAddress (
        _bstr_t Address );
    _bstr_t GetOrganization ( );
    void PutOrganization (
        _bstr_t Organization );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t Subject );
    _bstr_t GetBodyPlainText ( );
    void PutBodyPlainText (
        _bstr_t Body );
    _bstr_t GetBodyHtml ( );
    void PutBodyHtml (
        _bstr_t Body );
    long GetEncoding ( );
    void PutEncoding (
        long Encoding );
    long GetPriority ( );
    void PutPriority (
        long Priority );
    long GetID ( );
    _bstr_t GetMessageSource ( );
    _bstr_t GetMessageHeader ( );
    long GetSize ( );
    _bstr_t GetDate ( );
    _bstr_t GetToAddress ( );
    _bstr_t GetCcAddress ( );
    _bstr_t GetBccAddress ( );
    _bstr_t GetImapFlags ( );
    long GetImapUID ( );
    long GetImapSequenceNumber ( );
    void PutImapSequenceNumber (
        long Uid );
    HRESULT Clear ( );
    _bstr_t GetErrorDescription (
        long lError );
    HRESULT AddTo (
        _bstr_t EmailAddress,
        _bstr_t DisplayName );
    HRESULT AddCc (
        _bstr_t EmailAddress,
        _bstr_t DisplayName );
    HRESULT AddBcc (
        _bstr_t EmailAddress,
        _bstr_t DisplayName );
    long CountAttachments ( );
    _bstr_t GetAttachmentName (
        long ID );
    long GetAttachmentSize (
        long ID );
    HRESULT AddAttachment (
        _bstr_t FileName,
        _bstr_t AttachmentName,
        VARIANT_BOOL InlineDisposition );
    HRESULT SaveAttachment (
        long ID,
        _bstr_t SaveAsFile );
    VARIANT_BOOL ImapHasFlag (
        _bstr_t Flag );
    HRESULT LoadMIME (
        _bstr_t MimeFile );
    HRESULT SaveMIME (
        _bstr_t MimeFile );
    HRESULT Encode ( );
    HRESULT Decode ( );
    _bstr_t GetHeaderValue (
        _bstr_t Name );
    HRESULT AddHeader (
        _bstr_t Name,
        _bstr_t Value,
        VARIANT_BOOL Enquote );
    _bstr_t HtmlToPlainText (
        _bstr_t Html );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall get_UnsubscribeEmail (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_UnsubscribeEmail (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_UnsubscribeUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_UnsubscribeUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_FromName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_FromName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_FromAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_FromAddress (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_ReplyAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_ReplyAddress (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_ReadReceiptAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall put_ReadReceiptAddress (
        /*[in]*/ BSTR Address ) = 0;
      virtual HRESULT __stdcall get_Organization (
        /*[out,retval]*/ BSTR * Organization ) = 0;
      virtual HRESULT __stdcall put_Organization (
        /*[in]*/ BSTR Organization ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * Subject ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR Subject ) = 0;
      virtual HRESULT __stdcall get_BodyPlainText (
        /*[out,retval]*/ BSTR * Body ) = 0;
      virtual HRESULT __stdcall put_BodyPlainText (
        /*[in]*/ BSTR Body ) = 0;
      virtual HRESULT __stdcall get_BodyHtml (
        /*[out,retval]*/ BSTR * Body ) = 0;
      virtual HRESULT __stdcall put_BodyHtml (
        /*[in]*/ BSTR Body ) = 0;
      virtual HRESULT __stdcall get_Encoding (
        /*[out,retval]*/ long * Encoding ) = 0;
      virtual HRESULT __stdcall put_Encoding (
        /*[in]*/ long Encoding ) = 0;
      virtual HRESULT __stdcall get_Priority (
        /*[out,retval]*/ long * Priority ) = 0;
      virtual HRESULT __stdcall put_Priority (
        /*[in]*/ long Priority ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * ID ) = 0;
      virtual HRESULT __stdcall get_MessageSource (
        /*[out,retval]*/ BSTR * Source ) = 0;
      virtual HRESULT __stdcall get_MessageHeader (
        /*[out,retval]*/ BSTR * Header ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall get_Date (
        /*[out,retval]*/ BSTR * Date ) = 0;
      virtual HRESULT __stdcall get_ToAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall get_CcAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall get_BccAddress (
        /*[out,retval]*/ BSTR * Address ) = 0;
      virtual HRESULT __stdcall get_ImapFlags (
        /*[out,retval]*/ BSTR * Flags ) = 0;
      virtual HRESULT __stdcall get_ImapUID (
        /*[out,retval]*/ long * Uid ) = 0;
      virtual HRESULT __stdcall get_ImapSequenceNumber (
        /*[out,retval]*/ long * Uid ) = 0;
      virtual HRESULT __stdcall put_ImapSequenceNumber (
        /*[in]*/ long Uid ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long lError,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_AddTo (
        /*[in]*/ BSTR EmailAddress,
        /*[in]*/ BSTR DisplayName ) = 0;
      virtual HRESULT __stdcall raw_AddCc (
        /*[in]*/ BSTR EmailAddress,
        /*[in]*/ BSTR DisplayName ) = 0;
      virtual HRESULT __stdcall raw_AddBcc (
        /*[in]*/ BSTR EmailAddress,
        /*[in]*/ BSTR DisplayName ) = 0;
      virtual HRESULT __stdcall raw_CountAttachments (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentName (
        /*[in]*/ long ID,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_GetAttachmentSize (
        /*[in]*/ long ID,
        /*[out,retval]*/ long * Size ) = 0;
      virtual HRESULT __stdcall raw_AddAttachment (
        /*[in]*/ BSTR FileName,
        /*[in]*/ BSTR AttachmentName,
        /*[in]*/ VARIANT_BOOL InlineDisposition ) = 0;
      virtual HRESULT __stdcall raw_SaveAttachment (
        /*[in]*/ long ID,
        /*[in]*/ BSTR SaveAsFile ) = 0;
      virtual HRESULT __stdcall raw_ImapHasFlag (
        /*[in]*/ BSTR Flag,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL__IMessage0000 ) = 0;
      virtual HRESULT __stdcall raw_LoadMIME (
        /*[in]*/ BSTR MimeFile ) = 0;
      virtual HRESULT __stdcall raw_SaveMIME (
        /*[in]*/ BSTR MimeFile ) = 0;
      virtual HRESULT __stdcall raw_Encode ( ) = 0;
      virtual HRESULT __stdcall raw_Decode ( ) = 0;
      virtual HRESULT __stdcall raw_GetHeaderValue (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_AddHeader (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value,
        /*[in]*/ VARIANT_BOOL Enquote ) = 0;
      virtual HRESULT __stdcall raw_HtmlToPlainText (
        /*[in]*/ BSTR Html,
        /*[out,retval]*/ BSTR * Plain ) = 0;
};

struct __declspec(uuid("fd456c7c-370e-4c9d-8ef5-750a13aac1ed"))
OAuth2;
    // [ default ] interface IOAuth2

struct __declspec(uuid("ffb7e17f-ef95-437e-bb93-ef506948ad18"))
IOAuth2 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserCode))
    _bstr_t UserCode;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetRedirectUrl,put=PutRedirectUrl))
    _bstr_t RedirectUrl;
    __declspec(property(get=GetPollIntervalInSeconds))
    long PollIntervalInSeconds;
    __declspec(property(get=GetErrorHtml,put=PutErrorHtml))
    _bstr_t ErrorHtml;
    __declspec(property(get=GetUserCodeMessage))
    _bstr_t UserCodeMessage;
    __declspec(property(get=GetVerificationUrl,put=PutVerificationUrl))
    _bstr_t VerificationUrl;
    __declspec(property(get=GetLastResponse))
    _bstr_t LastResponse;
    __declspec(property(get=GetFlow,put=PutFlow))
    long Flow;
    __declspec(property(get=GetBearerToken,put=PutBearerToken))
    _bstr_t BearerToken;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetClientID,put=PutClientID))
    _bstr_t ClientID;
    __declspec(property(get=GetResultScope))
    _bstr_t ResultScope;
    __declspec(property(get=GetAutoOpenBrowser,put=PutAutoOpenBrowser))
    VARIANT_BOOL AutoOpenBrowser;
    __declspec(property(get=GetAuthCodeUrl,put=PutAuthCodeUrl))
    _bstr_t AuthCodeUrl;
    __declspec(property(get=GetRefreshToken,put=PutRefreshToken))
    _bstr_t RefreshToken;
    __declspec(property(get=GetClientSecret,put=PutClientSecret))
    _bstr_t ClientSecret;
    __declspec(property(get=GetResultError))
    _bstr_t ResultError;
    __declspec(property(get=GetBearerExpInSeconds))
    long BearerExpInSeconds;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetScope,put=PutScope))
    _bstr_t Scope;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetLoginUrl))
    _bstr_t LoginUrl;
    __declspec(property(get=GetDeviceCodeUrl,put=PutDeviceCodeUrl))
    _bstr_t DeviceCodeUrl;
    __declspec(property(get=GetResultErrorDescription))
    _bstr_t ResultErrorDescription;
    __declspec(property(get=GetProxyServer,put=PutProxyServer))
    _bstr_t ProxyServer;
    __declspec(property(get=GetProxyAccount,put=PutProxyAccount))
    _bstr_t ProxyAccount;
    __declspec(property(get=GetTokenExchangeUrl,put=PutTokenExchangeUrl))
    _bstr_t TokenExchangeUrl;
    __declspec(property(get=GetUserCodeExpInSeconds))
    long UserCodeExpInSeconds;
    __declspec(property(get=GetSuccessHtml,put=PutSuccessHtml))
    _bstr_t SuccessHtml;
    __declspec(property(get=GetDeviceCode))
    _bstr_t DeviceCode;
    __declspec(property(get=GetProxyPassword,put=PutProxyPassword))
    _bstr_t ProxyPassword;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    long GetFlow ( );
    _bstr_t GetAuthCodeUrl ( );
    _bstr_t GetDeviceCodeUrl ( );
    _bstr_t GetTokenExchangeUrl ( );
    _bstr_t GetRedirectUrl ( );
    _bstr_t GetVerificationUrl ( );
    _bstr_t GetClientID ( );
    _bstr_t GetClientSecret ( );
    _bstr_t GetScope ( );
    _bstr_t GetSuccessHtml ( );
    _bstr_t GetErrorHtml ( );
    void PutFlow (
        long Val );
    void PutAuthCodeUrl (
        _bstr_t Val );
    void PutDeviceCodeUrl (
        _bstr_t Val );
    void PutTokenExchangeUrl (
        _bstr_t Val );
    void PutRedirectUrl (
        _bstr_t Val );
    void PutVerificationUrl (
        _bstr_t Val );
    void PutClientID (
        _bstr_t Val );
    void PutClientSecret (
        _bstr_t Val );
    void PutScope (
        _bstr_t Val );
    void PutSuccessHtml (
        _bstr_t Val );
    void PutErrorHtml (
        _bstr_t Val );
    VARIANT_BOOL GetAutoOpenBrowser ( );
    _bstr_t GetLoginUrl ( );
    _bstr_t GetDeviceCode ( );
    _bstr_t GetUserCode ( );
    _bstr_t GetUserCodeMessage ( );
    _bstr_t GetBearerToken ( );
    _bstr_t GetRefreshToken ( );
    long GetBearerExpInSeconds ( );
    long GetUserCodeExpInSeconds ( );
    long GetPollIntervalInSeconds ( );
    _bstr_t GetLastResponse ( );
    _bstr_t GetResultScope ( );
    _bstr_t GetResultError ( );
    _bstr_t GetResultErrorDescription ( );
    void PutAutoOpenBrowser (
        VARIANT_BOOL Val );
    void PutBearerToken (
        _bstr_t Val );
    void PutRefreshToken (
        _bstr_t Val );
    _bstr_t GetProxyServer ( );
    _bstr_t GetProxyAccount ( );
    _bstr_t GetProxyPassword ( );
    void PutProxyServer (
        _bstr_t Val );
    void PutProxyAccount (
        _bstr_t Val );
    void PutProxyPassword (
        _bstr_t Val );
    HRESULT Login ( );
    HRESULT WaitForTokens (
        long nTimeoutMs );
    HRESULT RefreshBearerToken ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Flow (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_AuthCodeUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_DeviceCodeUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_TokenExchangeUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RedirectUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_VerificationUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ClientID (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ClientSecret (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_Scope (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_SuccessHtml (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ErrorHtml (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_Flow (
        /*[in]*/ long Val ) = 0;
      virtual HRESULT __stdcall put_AuthCodeUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_DeviceCodeUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_TokenExchangeUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_RedirectUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_VerificationUrl (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ClientID (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ClientSecret (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_Scope (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_SuccessHtml (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ErrorHtml (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_AutoOpenBrowser (
        /*[out,retval]*/ VARIANT_BOOL * Val ) = 0;
      virtual HRESULT __stdcall get_LoginUrl (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_DeviceCode (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_UserCode (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_UserCodeMessage (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_BearerToken (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_RefreshToken (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_BearerExpInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_UserCodeExpInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_PollIntervalInSeconds (
        /*[out,retval]*/ long * Val ) = 0;
      virtual HRESULT __stdcall get_LastResponse (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResultScope (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResultError (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ResultErrorDescription (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_AutoOpenBrowser (
        /*[in]*/ VARIANT_BOOL Val ) = 0;
      virtual HRESULT __stdcall put_BearerToken (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_RefreshToken (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_ProxyServer (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ProxyAccount (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall get_ProxyPassword (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_ProxyServer (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ProxyAccount (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall put_ProxyPassword (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_Login ( ) = 0;
      virtual HRESULT __stdcall raw_WaitForTokens (
        /*[in]*/ long nTimeoutMs ) = 0;
      virtual HRESULT __stdcall raw_RefreshBearerToken ( ) = 0;
};

struct __declspec(uuid("ca181116-e4ba-4f09-9176-328cdf8409d5"))
Smtp;
    // [ default ] interface ISmtp

struct __declspec(uuid("fe73ae95-a7c6-4e98-8af2-cab94aae743a"))
ISmtp : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIpVersion,put=PutIpVersion))
    long IpVersion;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetAuthentication,put=PutAuthentication))
    long Authentication;
    __declspec(property(get=GetTimeoutCommand,put=PutTimeoutCommand))
    long TimeoutCommand;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetBearerToken,put=PutBearerToken))
    _bstr_t BearerToken;
    __declspec(property(get=GetUseStartTls,put=PutUseStartTls))
    VARIANT_BOOL UseStartTls;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetTimeoutData,put=PutTimeoutData))
    long TimeoutData;
    __declspec(property(get=GetTimeoutConnect,put=PutTimeoutConnect))
    long TimeoutConnect;
    __declspec(property(get=GetHostPort,put=PutHostPort))
    long HostPort;
    __declspec(property(get=GetLastSmtpResponse))
    _bstr_t LastSmtpResponse;
    __declspec(property(get=GetTimeoutAuthentication,put=PutTimeoutAuthentication))
    long TimeoutAuthentication;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    long GetTimeoutConnect ( );
    void PutTimeoutConnect (
        long TimoutMs );
    long GetTimeoutAuthentication ( );
    void PutTimeoutAuthentication (
        long TimoutMs );
    long GetTimeoutCommand ( );
    void PutTimeoutCommand (
        long TimoutMs );
    long GetTimeoutData ( );
    void PutTimeoutData (
        long TimoutMs );
    long GetHostPort ( );
    void PutHostPort (
        long HostPort );
    long GetAuthentication ( );
    void PutAuthentication (
        long Authentication );
    VARIANT_BOOL GetUseStartTls ( );
    void PutUseStartTls (
        VARIANT_BOOL UseStartTls );
    long GetIpVersion ( );
    void PutIpVersion (
        long IpVersion );
    _bstr_t GetBearerToken ( );
    void PutBearerToken (
        _bstr_t Val );
    _bstr_t GetLastSmtpResponse ( );
    HRESULT SetSecure (
        long Port );
    HRESULT Connect (
        _bstr_t Host,
        _bstr_t Account,
        _bstr_t Password );
    HRESULT Disconnect ( );
    HRESULT Send (
        struct IMessage * Message );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_TimeoutConnect (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutConnect (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutAuthentication (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutAuthentication (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutCommand (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutCommand (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutData (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutData (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_HostPort (
        /*[out,retval]*/ long * HostPort ) = 0;
      virtual HRESULT __stdcall put_HostPort (
        /*[in]*/ long HostPort ) = 0;
      virtual HRESULT __stdcall get_Authentication (
        /*[out,retval]*/ long * Authentication ) = 0;
      virtual HRESULT __stdcall put_Authentication (
        /*[in]*/ long Authentication ) = 0;
      virtual HRESULT __stdcall get_UseStartTls (
        /*[out,retval]*/ VARIANT_BOOL * UseStartTls ) = 0;
      virtual HRESULT __stdcall put_UseStartTls (
        /*[in]*/ VARIANT_BOOL UseStartTls ) = 0;
      virtual HRESULT __stdcall get_IpVersion (
        /*[out,retval]*/ long * IpVersion ) = 0;
      virtual HRESULT __stdcall put_IpVersion (
        /*[in]*/ long IpVersion ) = 0;
      virtual HRESULT __stdcall get_BearerToken (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_BearerToken (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall get_LastSmtpResponse (
        /*[out,retval]*/ BSTR * LastSmtpResponse ) = 0;
      virtual HRESULT __stdcall raw_SetSecure (
        /*[in]*/ long Port ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Host,
        /*[in]*/ BSTR Account,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_Send (
        /*[in]*/ struct IMessage * Message ) = 0;
};

struct __declspec(uuid("6f7e09c2-caff-4501-9e34-f395df830b87"))
Pop3;
    // [ default ] interface IPop3

struct __declspec(uuid("7d24a1b3-4808-4208-9a9f-2a281256744a"))
IPop3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIpVersion,put=PutIpVersion))
    long IpVersion;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetAuthentication,put=PutAuthentication))
    long Authentication;
    __declspec(property(get=GetTimeoutCommand,put=PutTimeoutCommand))
    long TimeoutCommand;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetBearerToken,put=PutBearerToken))
    _bstr_t BearerToken;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetTimeoutData,put=PutTimeoutData))
    long TimeoutData;
    __declspec(property(get=GetTimeoutConnect,put=PutTimeoutConnect))
    long TimeoutConnect;
    __declspec(property(get=GetHostPort,put=PutHostPort))
    long HostPort;
    __declspec(property(get=GetLastPop3Response))
    _bstr_t LastPop3Response;
    __declspec(property(get=GetTimeoutAuthentication,put=PutTimeoutAuthentication))
    long TimeoutAuthentication;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    long GetTimeoutConnect ( );
    void PutTimeoutConnect (
        long TimoutMs );
    long GetTimeoutAuthentication ( );
    void PutTimeoutAuthentication (
        long TimoutMs );
    long GetTimeoutCommand ( );
    void PutTimeoutCommand (
        long TimoutMs );
    long GetTimeoutData ( );
    void PutTimeoutData (
        long TimoutMs );
    long GetHostPort ( );
    void PutHostPort (
        long HostPort );
    long GetAuthentication ( );
    void PutAuthentication (
        long Authentication );
    long GetIpVersion ( );
    void PutIpVersion (
        long IpVersion );
    _bstr_t GetLastPop3Response ( );
    _bstr_t GetBearerToken ( );
    void PutBearerToken (
        _bstr_t Val );
    HRESULT SetSecure (
        long Port );
    HRESULT Connect (
        _bstr_t Host,
        _bstr_t Account,
        _bstr_t Password );
    HRESULT Disconnect ( );
    VARIANT_BOOL IsConnected ( );
    long CountMessages ( );
    IMessagePtr GetEmailHeader (
        long ID );
    IMessagePtr GetEmailMessage (
        long lID );
    HRESULT DeleteMessage (
        long ID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_TimeoutConnect (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutConnect (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutAuthentication (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutAuthentication (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutCommand (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutCommand (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutData (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutData (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_HostPort (
        /*[out,retval]*/ long * HostPort ) = 0;
      virtual HRESULT __stdcall put_HostPort (
        /*[in]*/ long HostPort ) = 0;
      virtual HRESULT __stdcall get_Authentication (
        /*[out,retval]*/ long * Authentication ) = 0;
      virtual HRESULT __stdcall put_Authentication (
        /*[in]*/ long Authentication ) = 0;
      virtual HRESULT __stdcall get_IpVersion (
        /*[out,retval]*/ long * IpVersion ) = 0;
      virtual HRESULT __stdcall put_IpVersion (
        /*[in]*/ long IpVersion ) = 0;
      virtual HRESULT __stdcall get_LastPop3Response (
        /*[out,retval]*/ BSTR * LastPop3Response ) = 0;
      virtual HRESULT __stdcall get_BearerToken (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_BearerToken (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_SetSecure (
        /*[in]*/ long Port ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Host,
        /*[in]*/ BSTR Account,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * IsConnected ) = 0;
      virtual HRESULT __stdcall raw_CountMessages (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetEmailHeader (
        long ID,
        /*[out,retval]*/ struct IMessage * * Header ) = 0;
      virtual HRESULT __stdcall raw_GetEmailMessage (
        /*[in]*/ long lID,
        /*[out,retval]*/ struct IMessage * * Message ) = 0;
      virtual HRESULT __stdcall raw_DeleteMessage (
        long ID ) = 0;
};

struct __declspec(uuid("56bc74e1-2204-4049-9b1f-336ed3d57a8c"))
ImapFetchData;
    // [ default ] interface IImapFetchData

struct __declspec(uuid("e867b037-8b16-4c91-b4f3-91a5a5b9032f"))
IImapFetchData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueAsInt))
    long ValueAsInt;
    __declspec(property(get=GetIsTopLevel))
    VARIANT_BOOL IsTopLevel;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetValue))
    _bstr_t Value;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsTopLevel ( );
    long GetType ( );
    _bstr_t GetValue ( );
    long GetValueAsInt ( );
    _bstr_t GetText ( );
    long GetSubDataCount ( );
    IImapFetchDataPtr GetSubData (
        long lIdx );
    IImapFetchDataPtr GetSubDataByName (
        _bstr_t Val );
    VARIANT_BOOL ContainsValue (
        _bstr_t Val );
    VARIANT_BOOL ContainsIntValue (
        long Val );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_IsTopLevel (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_ValueAsInt (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubDataCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubData (
        /*[in]*/ long lIdx,
        /*[out,retval]*/ struct IImapFetchData * * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetSubDataByName (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ struct IImapFetchData * * pVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsValue (
        /*[in]*/ BSTR Val,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_ContainsIntValue (
        /*[in]*/ long Val,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
};

struct __declspec(uuid("b5bb4ee0-3f88-41a8-bc18-65c90a2cfe9e"))
Imap;
    // [ default ] interface IImap

struct __declspec(uuid("2f17d77b-374d-431e-8772-8fd1b20d1516"))
IImap : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetBuild))
    _bstr_t Build;
    __declspec(property(get=GetModule))
    _bstr_t Module;
    __declspec(property(get=GetUseStartTls,put=PutUseStartTls))
    VARIANT_BOOL UseStartTls;
    __declspec(property(get=GetLastError))
    long LastError;
    __declspec(property(get=GetTimeoutAppend,put=PutTimeoutAppend))
    long TimeoutAppend;
    __declspec(property(get=GetHierarchySeparator))
    _bstr_t HierarchySeparator;
    __declspec(property(get=GetUnseen))
    long Unseen;
    __declspec(property(get=GetLicenseStatus))
    _bstr_t LicenseStatus;
    __declspec(property(get=GetLicenseKey,put=PutLicenseKey))
    _bstr_t LicenseKey;
    __declspec(property(get=GetAutoClose,put=PutAutoClose))
    VARIANT_BOOL AutoClose;
    __declspec(property(get=GetFetchMaxNumItemsAtOnce,put=PutFetchMaxNumItemsAtOnce))
    long FetchMaxNumItemsAtOnce;
    __declspec(property(get=GetTimeoutConnect,put=PutTimeoutConnect))
    long TimeoutConnect;
    __declspec(property(get=GetCapabilities))
    _bstr_t Capabilities;
    __declspec(property(get=GetUidNext))
    long UidNext;
    __declspec(property(get=GetMaximumPendingFetchData,put=PutMaximumPendingFetchData))
    long MaximumPendingFetchData;
    __declspec(property(get=GetIpVersion,put=PutIpVersion))
    long IpVersion;
    __declspec(property(get=GetLogFile,put=PutLogFile))
    _bstr_t LogFile;
    __declspec(property(get=GetActivityFile,put=PutActivityFile))
    _bstr_t ActivityFile;
    __declspec(property(get=GetExists))
    long Exists;
    __declspec(property(get=GetHostPort,put=PutHostPort))
    long HostPort;
    __declspec(property(get=GetMaximumPendingExpunged,put=PutMaximumPendingExpunged))
    long MaximumPendingExpunged;
    __declspec(property(get=GetSecure,put=PutSecure))
    VARIANT_BOOL Secure;
    __declspec(property(get=GetTimeoutCommand,put=PutTimeoutCommand))
    long TimeoutCommand;
    __declspec(property(get=GetRecent))
    long Recent;
    __declspec(property(get=GetAuthentication,put=PutAuthentication))
    long Authentication;
    __declspec(property(get=GetLastImapResponse))
    _bstr_t LastImapResponse;
    __declspec(property(get=GetUseSequenceNumForStoreAndCopy,put=PutUseSequenceNumForStoreAndCopy))
    VARIANT_BOOL UseSequenceNumForStoreAndCopy;
    __declspec(property(get=GetBearerToken,put=PutBearerToken))
    _bstr_t BearerToken;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetVersion ( );
    _bstr_t GetBuild ( );
    _bstr_t GetModule ( );
    _bstr_t GetLicenseStatus ( );
    _bstr_t GetLicenseKey ( );
    void PutLicenseKey (
        _bstr_t LicenseKey );
    HRESULT SaveLicenseKey ( );
    _bstr_t GetLogFile ( );
    void PutLogFile (
        _bstr_t LogFile );
    _bstr_t GetActivityFile ( );
    void PutActivityFile (
        _bstr_t ActivityFile );
    HRESULT Sleep (
        long Ms );
    HRESULT Clear ( );
    long GetLastError ( );
    _bstr_t GetErrorDescription (
        long ErrorCode );
    long GetTimeoutConnect ( );
    void PutTimeoutConnect (
        long TimoutMs );
    long GetTimeoutCommand ( );
    void PutTimeoutCommand (
        long TimoutMs );
    long GetTimeoutAppend ( );
    void PutTimeoutAppend (
        long TimoutMs );
    long GetFetchMaxNumItemsAtOnce ( );
    void PutFetchMaxNumItemsAtOnce (
        long pVal );
    long GetMaximumPendingFetchData ( );
    void PutMaximumPendingFetchData (
        long pVal );
    long GetMaximumPendingExpunged ( );
    void PutMaximumPendingExpunged (
        long pVal );
    VARIANT_BOOL GetUseSequenceNumForStoreAndCopy ( );
    void PutUseSequenceNumForStoreAndCopy (
        VARIANT_BOOL pVal );
    long GetHostPort ( );
    void PutHostPort (
        long HostPort );
    long GetAuthentication ( );
    void PutAuthentication (
        long Authentication );
    VARIANT_BOOL GetUseStartTls ( );
    void PutUseStartTls (
        VARIANT_BOOL UseStartTls );
    VARIANT_BOOL GetAutoClose ( );
    void PutAutoClose (
        VARIANT_BOOL AutoClose );
    long GetIpVersion ( );
    void PutIpVersion (
        long IpVersion );
    VARIANT_BOOL GetSecure ( );
    void PutSecure (
        VARIANT_BOOL pVal );
    _bstr_t GetLastImapResponse ( );
    _bstr_t GetHierarchySeparator ( );
    _bstr_t GetCapabilities ( );
    long GetExists ( );
    long GetRecent ( );
    long GetUnseen ( );
    long GetUidNext ( );
    _bstr_t GetBearerToken ( );
    void PutBearerToken (
        _bstr_t Val );
    HRESULT SetSecure (
        long Port );
    HRESULT Connect (
        _bstr_t Host,
        _bstr_t Account,
        _bstr_t Password );
    HRESULT Disconnect ( );
    VARIANT_BOOL IsConnected ( );
    HRESULT Select (
        _bstr_t Mailbox );
    HRESULT Examine (
        _bstr_t Mailbox );
    HRESULT Status (
        _bstr_t Mailbox );
    HRESULT Close ( );
    HRESULT Create (
        _bstr_t MailboxName );
    HRESULT Delete (
        _bstr_t MailboxName );
    HRESULT Rename (
        _bstr_t Source,
        _bstr_t Target );
    HRESULT Subscribe (
        _bstr_t MailboxName );
    HRESULT Unsubscribe (
        _bstr_t MailboxName );
    HRESULT Copy (
        _bstr_t IdSet,
        _bstr_t Mailbox );
    HRESULT Store (
        _bstr_t IdSet,
        _bstr_t Flags,
        long Option );
    HRESULT Noop ( );
    HRESULT Check ( );
    HRESULT Expunge ( );
    long GetPendingExpunged ( );
    IImapFetchDataPtr GetPendingFetchData ( );
    HRESULT ListSubscribed (
        _bstr_t Reference,
        _bstr_t Mailbox );
    HRESULT List (
        _bstr_t Reference,
        _bstr_t Mailbox );
    long ListCount ( );
    _bstr_t ListAttributes (
        long Index );
    VARIANT_BOOL ListHasAttribute (
        long Index,
        BSTR * Attribute );
    _bstr_t ListName (
        long Index );
    IMessagePtr FetchFirstEmail (
        _bstr_t Criteria );
    IMessagePtr FetchNextEmail ( );
    IMessagePtr FetchFirstEmailHeader (
        _bstr_t Criteria );
    IMessagePtr FetchNextEmailHeader ( );
    IImapFetchDataPtr FetchFirst (
        _bstr_t Criteria,
        _bstr_t DataItems );
    IImapFetchDataPtr FetchNext ( );
    HRESULT Append (
        _bstr_t Mailbox,
        struct IMessage * pVal,
        _bstr_t Flags,
        _bstr_t DateTime );
    VARIANT_BOOL HasCapability (
        _bstr_t Capability );
    _bstr_t FormatDate (
        long Year,
        long Month,
        long Day );
    _bstr_t FormatTime (
        long Hour,
        long Minute,
        long Second,
        long OffsetMinute );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Build (
        /*[out,retval]*/ BSTR * Build ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ BSTR * Module ) = 0;
      virtual HRESULT __stdcall get_LicenseStatus (
        /*[out,retval]*/ BSTR * LicenseStatus ) = 0;
      virtual HRESULT __stdcall get_LicenseKey (
        /*[out,retval]*/ BSTR * LicenseKey ) = 0;
      virtual HRESULT __stdcall put_LicenseKey (
        /*[in]*/ BSTR LicenseKey ) = 0;
      virtual HRESULT __stdcall raw_SaveLicenseKey ( ) = 0;
      virtual HRESULT __stdcall get_LogFile (
        /*[out,retval]*/ BSTR * LogFile ) = 0;
      virtual HRESULT __stdcall put_LogFile (
        /*[in]*/ BSTR LogFile ) = 0;
      virtual HRESULT __stdcall get_ActivityFile (
        /*[out,retval]*/ BSTR * ActivityFile ) = 0;
      virtual HRESULT __stdcall put_ActivityFile (
        /*[in]*/ BSTR ActivityFile ) = 0;
      virtual HRESULT __stdcall raw_Sleep (
        long Ms ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall get_LastError (
        /*[out,retval]*/ long * LastError ) = 0;
      virtual HRESULT __stdcall raw_GetErrorDescription (
        /*[in]*/ long ErrorCode,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_TimeoutConnect (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutConnect (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutCommand (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutCommand (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_TimeoutAppend (
        /*[out,retval]*/ long * TimoutMs ) = 0;
      virtual HRESULT __stdcall put_TimeoutAppend (
        /*[in]*/ long TimoutMs ) = 0;
      virtual HRESULT __stdcall get_FetchMaxNumItemsAtOnce (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_FetchMaxNumItemsAtOnce (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPendingFetchData (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumPendingFetchData (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_MaximumPendingExpunged (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_MaximumPendingExpunged (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_UseSequenceNumForStoreAndCopy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_UseSequenceNumForStoreAndCopy (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_HostPort (
        /*[out,retval]*/ long * HostPort ) = 0;
      virtual HRESULT __stdcall put_HostPort (
        /*[in]*/ long HostPort ) = 0;
      virtual HRESULT __stdcall get_Authentication (
        /*[out,retval]*/ long * Authentication ) = 0;
      virtual HRESULT __stdcall put_Authentication (
        /*[in]*/ long Authentication ) = 0;
      virtual HRESULT __stdcall get_UseStartTls (
        /*[out,retval]*/ VARIANT_BOOL * UseStartTls ) = 0;
      virtual HRESULT __stdcall put_UseStartTls (
        /*[in]*/ VARIANT_BOOL UseStartTls ) = 0;
      virtual HRESULT __stdcall get_AutoClose (
        /*[out,retval]*/ VARIANT_BOOL * AutoClose ) = 0;
      virtual HRESULT __stdcall put_AutoClose (
        /*[in]*/ VARIANT_BOOL AutoClose ) = 0;
      virtual HRESULT __stdcall get_IpVersion (
        /*[out,retval]*/ long * IpVersion ) = 0;
      virtual HRESULT __stdcall put_IpVersion (
        /*[in]*/ long IpVersion ) = 0;
      virtual HRESULT __stdcall get_Secure (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Secure (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_LastImapResponse (
        /*[out,retval]*/ BSTR * LastImapResponse ) = 0;
      virtual HRESULT __stdcall get_HierarchySeparator (
        /*[out,retval]*/ BSTR * HierarchySeparator ) = 0;
      virtual HRESULT __stdcall get_Capabilities (
        /*[out,retval]*/ BSTR * Capabilities ) = 0;
      virtual HRESULT __stdcall get_Exists (
        /*[out,retval]*/ long * Exists ) = 0;
      virtual HRESULT __stdcall get_Recent (
        /*[out,retval]*/ long * Recent ) = 0;
      virtual HRESULT __stdcall get_Unseen (
        /*[out,retval]*/ long * Unseen ) = 0;
      virtual HRESULT __stdcall get_UidNext (
        /*[out,retval]*/ long * UidNext ) = 0;
      virtual HRESULT __stdcall get_BearerToken (
        /*[out,retval]*/ BSTR * Val ) = 0;
      virtual HRESULT __stdcall put_BearerToken (
        /*[in]*/ BSTR Val ) = 0;
      virtual HRESULT __stdcall raw_SetSecure (
        /*[in]*/ long Port ) = 0;
      virtual HRESULT __stdcall raw_Connect (
        /*[in]*/ BSTR Host,
        /*[in]*/ BSTR Account,
        /*[in]*/ BSTR Password ) = 0;
      virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
      virtual HRESULT __stdcall raw_IsConnected (
        /*[out,retval]*/ VARIANT_BOOL * IsConnected ) = 0;
      virtual HRESULT __stdcall raw_Select (
        /*[in]*/ BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_Examine (
        /*[in]*/ BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_Status (
        /*[in]*/ BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR MailboxName ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ BSTR MailboxName ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR Source,
        /*[in]*/ BSTR Target ) = 0;
      virtual HRESULT __stdcall raw_Subscribe (
        /*[in]*/ BSTR MailboxName ) = 0;
      virtual HRESULT __stdcall raw_Unsubscribe (
        /*[in]*/ BSTR MailboxName ) = 0;
      virtual HRESULT __stdcall raw_Copy (
        /*[in]*/ BSTR IdSet,
        /*[in]*/ BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_Store (
        /*[in]*/ BSTR IdSet,
        /*[in]*/ BSTR Flags,
        /*[in]*/ long Option ) = 0;
      virtual HRESULT __stdcall raw_Noop ( ) = 0;
      virtual HRESULT __stdcall raw_Check ( ) = 0;
      virtual HRESULT __stdcall raw_Expunge ( ) = 0;
      virtual HRESULT __stdcall raw_GetPendingExpunged (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_GetPendingFetchData (
        /*[out,retval]*/ struct IImapFetchData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_ListSubscribed (
        BSTR Reference,
        BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_List (
        BSTR Reference,
        BSTR Mailbox ) = 0;
      virtual HRESULT __stdcall raw_ListCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_ListAttributes (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * __MIDL__IImap0000 ) = 0;
      virtual HRESULT __stdcall raw_ListHasAttribute (
        /*[in]*/ long Index,
        /*[in]*/ BSTR * Attribute,
        /*[out,retval]*/ VARIANT_BOOL * __MIDL__IImap0001 ) = 0;
      virtual HRESULT __stdcall raw_ListName (
        /*[in]*/ long Index,
        /*[out,retval]*/ BSTR * __MIDL__IImap0002 ) = 0;
      virtual HRESULT __stdcall raw_FetchFirstEmail (
        /*[in]*/ BSTR Criteria,
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNextEmail (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchFirstEmailHeader (
        /*[in]*/ BSTR Criteria,
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNextEmailHeader (
        /*[out,retval]*/ struct IMessage * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchFirst (
        /*[in]*/ BSTR Criteria,
        /*[in]*/ BSTR DataItems,
        /*[out,retval]*/ struct IImapFetchData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_FetchNext (
        /*[out,retval]*/ struct IImapFetchData * * ppVal ) = 0;
      virtual HRESULT __stdcall raw_Append (
        /*[in]*/ BSTR Mailbox,
        /*[in]*/ struct IMessage * pVal,
        /*[in]*/ BSTR Flags,
        /*[in]*/ BSTR DateTime ) = 0;
      virtual HRESULT __stdcall raw_HasCapability (
        /*[in]*/ BSTR Capability,
        /*[out,retval]*/ VARIANT_BOOL * CapabilitySupported ) = 0;
      virtual HRESULT __stdcall raw_FormatDate (
        /*[in]*/ long Year,
        /*[in]*/ long Month,
        /*[in]*/ long Day,
        /*[out,retval]*/ BSTR * DateString ) = 0;
      virtual HRESULT __stdcall raw_FormatTime (
        /*[in]*/ long Hour,
        /*[in]*/ long Minute,
        /*[in]*/ long Second,
        /*[in]*/ long OffsetMinute,
        /*[out,retval]*/ BSTR * DateString ) = 0;
};

struct __declspec(uuid("5f45f782-073a-4d8d-adb9-23c9f3f34684"))
Constants;
    // [ default ] interface IConstants

struct __declspec(uuid("ad78421f-9eca-4bfd-81e6-94712d62defd"))
IConstants : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIPVERSION_6))
    long IPVERSION_6;
    __declspec(property(get=GetIPVERSION_6_4))
    long IPVERSION_6_4;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_DEFAULT))
    long EMAIL_MESSAGE_ENCODING_DEFAULT;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_THAI))
    long EMAIL_MESSAGE_ENCODING_THAI;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_JAPANESE))
    long EMAIL_MESSAGE_ENCODING_JAPANESE;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_CHINESE_SIMP))
    long EMAIL_MESSAGE_ENCODING_CHINESE_SIMP;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_KOREAN))
    long EMAIL_MESSAGE_ENCODING_KOREAN;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_CHINESE_TRAD))
    long EMAIL_MESSAGE_ENCODING_CHINESE_TRAD;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_CENTRALEUROPE))
    long EMAIL_MESSAGE_ENCODING_CENTRALEUROPE;
    __declspec(property(get=GetPOP3_AUTH_PLAIN))
    long POP3_AUTH_PLAIN;
    __declspec(property(get=GetPOP3_AUTH_APOP))
    long POP3_AUTH_APOP;
    __declspec(property(get=GetPOP3_AUTH_AUTO))
    long POP3_AUTH_AUTO;
    __declspec(property(get=GetPOP3_AUTH_OAUTH2))
    long POP3_AUTH_OAUTH2;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_RUSSIAN))
    long EMAIL_MESSAGE_ENCODING_RUSSIAN;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_WESTERN))
    long EMAIL_MESSAGE_ENCODING_WESTERN;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_GREEK))
    long EMAIL_MESSAGE_ENCODING_GREEK;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_TURKISH))
    long EMAIL_MESSAGE_ENCODING_TURKISH;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_UTF7))
    long EMAIL_MESSAGE_ENCODING_UTF7;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_UTF8))
    long EMAIL_MESSAGE_ENCODING_UTF8;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_HEBREW))
    long EMAIL_MESSAGE_ENCODING_HEBREW;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_ARABIC))
    long EMAIL_MESSAGE_ENCODING_ARABIC;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_BALTIC))
    long EMAIL_MESSAGE_ENCODING_BALTIC;
    __declspec(property(get=GetEMAIL_MESSAGE_ENCODING_VIETNAMESE))
    long EMAIL_MESSAGE_ENCODING_VIETNAMESE;
    __declspec(property(get=GetOAUTH2_FLOW_UNDEFINED))
    long OAUTH2_FLOW_UNDEFINED;
    __declspec(property(get=GetOAUTH2_FLOW_AUTHCODE))
    long OAUTH2_FLOW_AUTHCODE;
    __declspec(property(get=GetOAUTH2_FLOW_DEVICECODE))
    long OAUTH2_FLOW_DEVICECODE;
    __declspec(property(get=GetEMAIL_MESSAGE_PRIORITY_HIGHEST))
    long EMAIL_MESSAGE_PRIORITY_HIGHEST;
    __declspec(property(get=GetEMAIL_MESSAGE_PRIORITY_HIGH))
    long EMAIL_MESSAGE_PRIORITY_HIGH;
    __declspec(property(get=GetSMTP_AUTH_AUTO))
    long SMTP_AUTH_AUTO;
    __declspec(property(get=GetSMTP_AUTH_PLAIN))
    long SMTP_AUTH_PLAIN;
    __declspec(property(get=GetSMTP_AUTH_LOGIN))
    long SMTP_AUTH_LOGIN;
    __declspec(property(get=GetSMTP_AUTH_MD5CRAM))
    long SMTP_AUTH_MD5CRAM;
    __declspec(property(get=GetSMTP_AUTH_OAUTH2))
    long SMTP_AUTH_OAUTH2;
    __declspec(property(get=GetIMAP_SK_ALL))
    _bstr_t IMAP_SK_ALL;
    __declspec(property(get=GetIMAP_SK_ANSWERED))
    _bstr_t IMAP_SK_ANSWERED;
    __declspec(property(get=GetIMAP_SK_BCC))
    _bstr_t IMAP_SK_BCC;
    __declspec(property(get=GetIMAP_SK_BEFORE))
    _bstr_t IMAP_SK_BEFORE;
    __declspec(property(get=GetIMAP_SK_BODY))
    _bstr_t IMAP_SK_BODY;
    __declspec(property(get=GetIMAP_SK_CC))
    _bstr_t IMAP_SK_CC;
    __declspec(property(get=GetIMAP_SK_DELETED))
    _bstr_t IMAP_SK_DELETED;
    __declspec(property(get=GetIMAP_SK_DRAFT))
    _bstr_t IMAP_SK_DRAFT;
    __declspec(property(get=GetIMAP_SK_FLAGGED))
    _bstr_t IMAP_SK_FLAGGED;
    __declspec(property(get=GetIMAP_SK_FROM))
    _bstr_t IMAP_SK_FROM;
    __declspec(property(get=GetIMAP_SK_HEADER))
    _bstr_t IMAP_SK_HEADER;
    __declspec(property(get=GetIMAP_SK_KEYWORD))
    _bstr_t IMAP_SK_KEYWORD;
    __declspec(property(get=GetIMAP_SK_LARGER))
    _bstr_t IMAP_SK_LARGER;
    __declspec(property(get=GetIMAP_SK_NEW))
    _bstr_t IMAP_SK_NEW;
    __declspec(property(get=GetIMAP_SK_NOT))
    _bstr_t IMAP_SK_NOT;
    __declspec(property(get=GetIMAP_SK_OLD))
    _bstr_t IMAP_SK_OLD;
    __declspec(property(get=GetIMAP_SK_ON))
    _bstr_t IMAP_SK_ON;
    __declspec(property(get=GetIMAP_SK_OR))
    _bstr_t IMAP_SK_OR;
    __declspec(property(get=GetIMAP_SK_RECENT))
    _bstr_t IMAP_SK_RECENT;
    __declspec(property(get=GetIMAP_SK_SEEN))
    _bstr_t IMAP_SK_SEEN;
    __declspec(property(get=GetIMAP_SK_SENTBEFORE))
    _bstr_t IMAP_SK_SENTBEFORE;
    __declspec(property(get=GetIMAP_SK_SENTON))
    _bstr_t IMAP_SK_SENTON;
    __declspec(property(get=GetIMAP_SK_SMALLER))
    _bstr_t IMAP_SK_SMALLER;
    __declspec(property(get=GetIMAP_SK_SUBJECT))
    _bstr_t IMAP_SK_SUBJECT;
    __declspec(property(get=GetIMAP_SK_TEXT))
    _bstr_t IMAP_SK_TEXT;
    __declspec(property(get=GetIMAP_SK_TO))
    _bstr_t IMAP_SK_TO;
    __declspec(property(get=GetIMAP_SK_UID))
    _bstr_t IMAP_SK_UID;
    __declspec(property(get=GetIMAP_SK_UNANSWERED))
    _bstr_t IMAP_SK_UNANSWERED;
    __declspec(property(get=GetIMAP_SK_UNDELETED))
    _bstr_t IMAP_SK_UNDELETED;
    __declspec(property(get=GetIMAP_SK_UNDRAFT))
    _bstr_t IMAP_SK_UNDRAFT;
    __declspec(property(get=GetIMAP_SK_UNFLAGGED))
    _bstr_t IMAP_SK_UNFLAGGED;
    __declspec(property(get=GetIMAP_SK_UNKEYWORD))
    _bstr_t IMAP_SK_UNKEYWORD;
    __declspec(property(get=GetIMAP_SK_UNSEEN))
    _bstr_t IMAP_SK_UNSEEN;
    __declspec(property(get=GetIMAP_FM_ALL))
    _bstr_t IMAP_FM_ALL;
    __declspec(property(get=GetIMAP_FM_FAST))
    _bstr_t IMAP_FM_FAST;
    __declspec(property(get=GetIMAP_FM_FULL))
    _bstr_t IMAP_FM_FULL;
    __declspec(property(get=GetIMAP_FDI_BODY))
    _bstr_t IMAP_FDI_BODY;
    __declspec(property(get=GetIMAP_FDI_HEADER))
    _bstr_t IMAP_FDI_HEADER;
    __declspec(property(get=GetIMAP_FDI_HEADER_FIELDS))
    _bstr_t IMAP_FDI_HEADER_FIELDS;
    __declspec(property(get=GetIMAP_FDI_HEADER_FIELDS_NOT))
    _bstr_t IMAP_FDI_HEADER_FIELDS_NOT;
    __declspec(property(get=GetIMAP_FDI_MIME))
    _bstr_t IMAP_FDI_MIME;
    __declspec(property(get=GetIMAP_SK_SENTSINCE))
    _bstr_t IMAP_SK_SENTSINCE;
    __declspec(property(get=GetIMAP_SK_SINCE))
    _bstr_t IMAP_SK_SINCE;
    __declspec(property(get=GetEMAIL_MESSAGE_PRIORITY_MEDIUM))
    long EMAIL_MESSAGE_PRIORITY_MEDIUM;
    __declspec(property(get=GetEMAIL_MESSAGE_PRIORITY_LOW))
    long EMAIL_MESSAGE_PRIORITY_LOW;
    __declspec(property(get=GetEMAIL_MESSAGE_PRIORITY_LOWEST))
    long EMAIL_MESSAGE_PRIORITY_LOWEST;
    __declspec(property(get=GetIMAP_FDI_TEXT))
    _bstr_t IMAP_FDI_TEXT;
    __declspec(property(get=GetIMAP_FDI_BODY_PEEK))
    _bstr_t IMAP_FDI_BODY_PEEK;
    __declspec(property(get=GetIMAP_FDI_BODYSTRUCTURE))
    _bstr_t IMAP_FDI_BODYSTRUCTURE;
    __declspec(property(get=GetIMAP_FDI_ENVELOPE))
    _bstr_t IMAP_FDI_ENVELOPE;
    __declspec(property(get=GetIMAP_FDI_FLAGS))
    _bstr_t IMAP_FDI_FLAGS;
    __declspec(property(get=GetIMAP_FDI_INTERNALDATE))
    _bstr_t IMAP_FDI_INTERNALDATE;
    __declspec(property(get=GetIMAP_FDI_RFC822))
    _bstr_t IMAP_FDI_RFC822;
    __declspec(property(get=GetIMAP_FDI_RFC822_HEADER))
    _bstr_t IMAP_FDI_RFC822_HEADER;
    __declspec(property(get=GetIMAP_FDI_RFC822_SIZE))
    _bstr_t IMAP_FDI_RFC822_SIZE;
    __declspec(property(get=GetIMAP_FDI_RFC822_TEXT))
    _bstr_t IMAP_FDI_RFC822_TEXT;
    __declspec(property(get=GetIMAP_FDI_UID))
    _bstr_t IMAP_FDI_UID;
    __declspec(property(get=GetIMAP_FD_TYPE_INTEGER))
    long IMAP_FD_TYPE_INTEGER;
    __declspec(property(get=GetIMAP_FD_TYPE_STRING))
    long IMAP_FD_TYPE_STRING;
    __declspec(property(get=GetIMAP_FD_TYPE_STRING_LITERAL))
    long IMAP_FD_TYPE_STRING_LITERAL;
    __declspec(property(get=GetIMAP_FD_TYPE_LIST))
    long IMAP_FD_TYPE_LIST;
    __declspec(property(get=GetIMAP_MBX_FLAG_NOINFERIORS))
    _bstr_t IMAP_MBX_FLAG_NOINFERIORS;
    __declspec(property(get=GetIMAP_MBX_FLAG_NOSELECT))
    _bstr_t IMAP_MBX_FLAG_NOSELECT;
    __declspec(property(get=GetIMAP_MBX_FLAG_MARKED))
    _bstr_t IMAP_MBX_FLAG_MARKED;
    __declspec(property(get=GetIMAP_MBX_FLAG_UNMARKED))
    _bstr_t IMAP_MBX_FLAG_UNMARKED;
    __declspec(property(get=GetIMAP_MBX_FLAG_ALL))
    _bstr_t IMAP_MBX_FLAG_ALL;
    __declspec(property(get=GetIMAP_MBX_FLAG_ARCHIVE))
    _bstr_t IMAP_MBX_FLAG_ARCHIVE;
    __declspec(property(get=GetIMAP_MBX_FLAG_DRAFTS))
    _bstr_t IMAP_MBX_FLAG_DRAFTS;
    __declspec(property(get=GetIMAP_MBX_FLAG_FLAGGED))
    _bstr_t IMAP_MBX_FLAG_FLAGGED;
    __declspec(property(get=GetIMAP_MBX_FLAG_JUNK))
    _bstr_t IMAP_MBX_FLAG_JUNK;
    __declspec(property(get=GetIMAP_MBX_FLAG_SENT))
    _bstr_t IMAP_MBX_FLAG_SENT;
    __declspec(property(get=GetIMAP_MBX_FLAG_TRASH))
    _bstr_t IMAP_MBX_FLAG_TRASH;
    __declspec(property(get=GetIMAP_MBX_FLAG_HASNOCHILDREN))
    _bstr_t IMAP_MBX_FLAG_HASNOCHILDREN;
    __declspec(property(get=GetIMAP_MBX_FLAG_HASCHILDREN))
    _bstr_t IMAP_MBX_FLAG_HASCHILDREN;
    __declspec(property(get=GetIMAP_MAIL_FLAG_SEEN))
    _bstr_t IMAP_MAIL_FLAG_SEEN;
    __declspec(property(get=GetIMAP_MAIL_FLAG_ANSWERED))
    _bstr_t IMAP_MAIL_FLAG_ANSWERED;
    __declspec(property(get=GetIMAP_MAIL_FLAG_FLAGGED))
    _bstr_t IMAP_MAIL_FLAG_FLAGGED;
    __declspec(property(get=GetIMAP_MAIL_FLAG_DELETED))
    _bstr_t IMAP_MAIL_FLAG_DELETED;
    __declspec(property(get=GetIMAP_MAIL_FLAG_DRAFT))
    _bstr_t IMAP_MAIL_FLAG_DRAFT;
    __declspec(property(get=GetIMAP_MAIL_FLAG_RECENT))
    _bstr_t IMAP_MAIL_FLAG_RECENT;
    __declspec(property(get=GetIMAP_FD_TYPE_ATOM))
    long IMAP_FD_TYPE_ATOM;
    __declspec(property(get=GetIMAP_FD_TYPE_NIL))
    long IMAP_FD_TYPE_NIL;
    __declspec(property(get=GetIMAP_STO_SET))
    long IMAP_STO_SET;
    __declspec(property(get=GetIMAP_STO_ADD))
    long IMAP_STO_ADD;
    __declspec(property(get=GetIMAP_STO_REMOVE))
    long IMAP_STO_REMOVE;
    __declspec(property(get=GetIMAP_STO_SILENT))
    long IMAP_STO_SILENT;
    __declspec(property(get=GetIMAP_AUTH_AUTO))
    long IMAP_AUTH_AUTO;
    __declspec(property(get=GetIMAP_AUTH_LOGIN))
    long IMAP_AUTH_LOGIN;
    __declspec(property(get=GetIMAP_AUTH_PLAIN))
    long IMAP_AUTH_PLAIN;
    __declspec(property(get=GetIMAP_AUTH_OAUTH2))
    long IMAP_AUTH_OAUTH2;
    __declspec(property(get=GetIPVERSION_4))
    long IPVERSION_4;

    //
    // Wrapper methods for error-handling
    //

    long GetEMAIL_MESSAGE_PRIORITY_HIGHEST ( );
    long GetEMAIL_MESSAGE_PRIORITY_HIGH ( );
    long GetEMAIL_MESSAGE_PRIORITY_MEDIUM ( );
    long GetEMAIL_MESSAGE_PRIORITY_LOW ( );
    long GetEMAIL_MESSAGE_PRIORITY_LOWEST ( );
    long GetEMAIL_MESSAGE_ENCODING_DEFAULT ( );
    long GetEMAIL_MESSAGE_ENCODING_THAI ( );
    long GetEMAIL_MESSAGE_ENCODING_JAPANESE ( );
    long GetEMAIL_MESSAGE_ENCODING_CHINESE_SIMP ( );
    long GetEMAIL_MESSAGE_ENCODING_KOREAN ( );
    long GetEMAIL_MESSAGE_ENCODING_CHINESE_TRAD ( );
    long GetEMAIL_MESSAGE_ENCODING_CENTRALEUROPE ( );
    long GetEMAIL_MESSAGE_ENCODING_RUSSIAN ( );
    long GetEMAIL_MESSAGE_ENCODING_WESTERN ( );
    long GetEMAIL_MESSAGE_ENCODING_GREEK ( );
    long GetEMAIL_MESSAGE_ENCODING_TURKISH ( );
    long GetEMAIL_MESSAGE_ENCODING_HEBREW ( );
    long GetEMAIL_MESSAGE_ENCODING_ARABIC ( );
    long GetEMAIL_MESSAGE_ENCODING_BALTIC ( );
    long GetEMAIL_MESSAGE_ENCODING_VIETNAMESE ( );
    long GetEMAIL_MESSAGE_ENCODING_UTF7 ( );
    long GetEMAIL_MESSAGE_ENCODING_UTF8 ( );
    long GetSMTP_AUTH_AUTO ( );
    long GetSMTP_AUTH_PLAIN ( );
    long GetSMTP_AUTH_LOGIN ( );
    long GetSMTP_AUTH_MD5CRAM ( );
    long GetSMTP_AUTH_OAUTH2 ( );
    long GetPOP3_AUTH_PLAIN ( );
    long GetPOP3_AUTH_APOP ( );
    long GetPOP3_AUTH_AUTO ( );
    long GetPOP3_AUTH_OAUTH2 ( );
    _bstr_t GetIMAP_SK_ALL ( );
    _bstr_t GetIMAP_SK_ANSWERED ( );
    _bstr_t GetIMAP_SK_BCC ( );
    _bstr_t GetIMAP_SK_BEFORE ( );
    _bstr_t GetIMAP_SK_BODY ( );
    _bstr_t GetIMAP_SK_CC ( );
    _bstr_t GetIMAP_SK_DELETED ( );
    _bstr_t GetIMAP_SK_DRAFT ( );
    _bstr_t GetIMAP_SK_FLAGGED ( );
    _bstr_t GetIMAP_SK_FROM ( );
    _bstr_t GetIMAP_SK_HEADER ( );
    _bstr_t GetIMAP_SK_KEYWORD ( );
    _bstr_t GetIMAP_SK_LARGER ( );
    _bstr_t GetIMAP_SK_NEW ( );
    _bstr_t GetIMAP_SK_NOT ( );
    _bstr_t GetIMAP_SK_OLD ( );
    _bstr_t GetIMAP_SK_ON ( );
    _bstr_t GetIMAP_SK_OR ( );
    _bstr_t GetIMAP_SK_RECENT ( );
    _bstr_t GetIMAP_SK_SEEN ( );
    _bstr_t GetIMAP_SK_SENTBEFORE ( );
    _bstr_t GetIMAP_SK_SENTON ( );
    _bstr_t GetIMAP_SK_SENTSINCE ( );
    _bstr_t GetIMAP_SK_SINCE ( );
    _bstr_t GetIMAP_SK_SMALLER ( );
    _bstr_t GetIMAP_SK_SUBJECT ( );
    _bstr_t GetIMAP_SK_TEXT ( );
    _bstr_t GetIMAP_SK_TO ( );
    _bstr_t GetIMAP_SK_UID ( );
    _bstr_t GetIMAP_SK_UNANSWERED ( );
    _bstr_t GetIMAP_SK_UNDELETED ( );
    _bstr_t GetIMAP_SK_UNDRAFT ( );
    _bstr_t GetIMAP_SK_UNFLAGGED ( );
    _bstr_t GetIMAP_SK_UNKEYWORD ( );
    _bstr_t GetIMAP_SK_UNSEEN ( );
    _bstr_t GetIMAP_FM_ALL ( );
    _bstr_t GetIMAP_FM_FAST ( );
    _bstr_t GetIMAP_FM_FULL ( );
    _bstr_t GetIMAP_FDI_BODY ( );
    _bstr_t GetIMAP_FDI_HEADER ( );
    _bstr_t GetIMAP_FDI_HEADER_FIELDS ( );
    _bstr_t GetIMAP_FDI_HEADER_FIELDS_NOT ( );
    _bstr_t GetIMAP_FDI_MIME ( );
    _bstr_t GetIMAP_FDI_TEXT ( );
    _bstr_t GetIMAP_FDI_BODY_PEEK ( );
    _bstr_t GetIMAP_FDI_BODYSTRUCTURE ( );
    _bstr_t GetIMAP_FDI_ENVELOPE ( );
    _bstr_t GetIMAP_FDI_FLAGS ( );
    _bstr_t GetIMAP_FDI_INTERNALDATE ( );
    _bstr_t GetIMAP_FDI_RFC822 ( );
    _bstr_t GetIMAP_FDI_RFC822_HEADER ( );
    _bstr_t GetIMAP_FDI_RFC822_SIZE ( );
    _bstr_t GetIMAP_FDI_RFC822_TEXT ( );
    _bstr_t GetIMAP_FDI_UID ( );
    _bstr_t GetIMAP_MBX_FLAG_NOINFERIORS ( );
    _bstr_t GetIMAP_MBX_FLAG_NOSELECT ( );
    _bstr_t GetIMAP_MBX_FLAG_MARKED ( );
    _bstr_t GetIMAP_MBX_FLAG_UNMARKED ( );
    _bstr_t GetIMAP_MBX_FLAG_ALL ( );
    _bstr_t GetIMAP_MBX_FLAG_ARCHIVE ( );
    _bstr_t GetIMAP_MBX_FLAG_DRAFTS ( );
    _bstr_t GetIMAP_MBX_FLAG_FLAGGED ( );
    _bstr_t GetIMAP_MBX_FLAG_JUNK ( );
    _bstr_t GetIMAP_MBX_FLAG_SENT ( );
    _bstr_t GetIMAP_MBX_FLAG_TRASH ( );
    _bstr_t GetIMAP_MBX_FLAG_HASNOCHILDREN ( );
    _bstr_t GetIMAP_MBX_FLAG_HASCHILDREN ( );
    _bstr_t GetIMAP_MAIL_FLAG_SEEN ( );
    _bstr_t GetIMAP_MAIL_FLAG_ANSWERED ( );
    _bstr_t GetIMAP_MAIL_FLAG_FLAGGED ( );
    _bstr_t GetIMAP_MAIL_FLAG_DELETED ( );
    _bstr_t GetIMAP_MAIL_FLAG_DRAFT ( );
    _bstr_t GetIMAP_MAIL_FLAG_RECENT ( );
    long GetIMAP_FD_TYPE_INTEGER ( );
    long GetIMAP_FD_TYPE_STRING ( );
    long GetIMAP_FD_TYPE_STRING_LITERAL ( );
    long GetIMAP_FD_TYPE_LIST ( );
    long GetIMAP_FD_TYPE_ATOM ( );
    long GetIMAP_FD_TYPE_NIL ( );
    long GetIMAP_STO_SET ( );
    long GetIMAP_STO_ADD ( );
    long GetIMAP_STO_REMOVE ( );
    long GetIMAP_STO_SILENT ( );
    long GetIMAP_AUTH_AUTO ( );
    long GetIMAP_AUTH_LOGIN ( );
    long GetIMAP_AUTH_PLAIN ( );
    long GetIMAP_AUTH_OAUTH2 ( );
    long GetOAUTH2_FLOW_UNDEFINED ( );
    long GetOAUTH2_FLOW_AUTHCODE ( );
    long GetOAUTH2_FLOW_DEVICECODE ( );
    long GetIPVERSION_4 ( );
    long GetIPVERSION_6 ( );
    long GetIPVERSION_6_4 ( );
    _bstr_t MessagePriorityToString (
        long lVal );
    _bstr_t MessageEncodingToString (
        long lVal );
    _bstr_t SmtpAuthToString (
        long lVal );
    _bstr_t Pop3AuthToString (
        long lVal );
    _bstr_t ImapAuthToString (
        long lVal );
    _bstr_t ImapFetchDataTypeToString (
        long lVal );
    _bstr_t ImapStoreOptionToString (
        long lVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EMAIL_MESSAGE_PRIORITY_HIGHEST (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_PRIORITY_HIGH (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_PRIORITY_MEDIUM (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_PRIORITY_LOW (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_PRIORITY_LOWEST (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_DEFAULT (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_THAI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_JAPANESE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_CHINESE_SIMP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_KOREAN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_CHINESE_TRAD (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_CENTRALEUROPE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_RUSSIAN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_WESTERN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_GREEK (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_TURKISH (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_HEBREW (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_ARABIC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_BALTIC (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_VIETNAMESE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_UTF7 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_EMAIL_MESSAGE_ENCODING_UTF8 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SMTP_AUTH_AUTO (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SMTP_AUTH_PLAIN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SMTP_AUTH_LOGIN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SMTP_AUTH_MD5CRAM (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_SMTP_AUTH_OAUTH2 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_POP3_AUTH_PLAIN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_POP3_AUTH_APOP (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_POP3_AUTH_AUTO (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_POP3_AUTH_OAUTH2 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_ALL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_ANSWERED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_BCC (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_BEFORE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_BODY (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_CC (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_DELETED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_DRAFT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_FLAGGED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_FROM (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_HEADER (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_KEYWORD (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_LARGER (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_NEW (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_NOT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_OLD (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_ON (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_OR (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_RECENT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SEEN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SENTBEFORE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SENTON (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SENTSINCE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SINCE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SMALLER (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_SUBJECT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_TEXT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_TO (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNANSWERED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNDELETED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNDRAFT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNFLAGGED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNKEYWORD (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_SK_UNSEEN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FM_ALL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FM_FAST (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FM_FULL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_BODY (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_HEADER (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_HEADER_FIELDS (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_HEADER_FIELDS_NOT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_MIME (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_TEXT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_BODY_PEEK (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_BODYSTRUCTURE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_ENVELOPE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_FLAGS (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_INTERNALDATE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_RFC822 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_RFC822_HEADER (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_RFC822_SIZE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_RFC822_TEXT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FDI_UID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_NOINFERIORS (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_NOSELECT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_MARKED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_UNMARKED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_ALL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_ARCHIVE (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_DRAFTS (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_FLAGGED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_JUNK (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_SENT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_TRASH (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_HASNOCHILDREN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MBX_FLAG_HASCHILDREN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_SEEN (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_ANSWERED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_FLAGGED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_DELETED (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_DRAFT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_MAIL_FLAG_RECENT (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_INTEGER (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_STRING (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_STRING_LITERAL (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_LIST (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_ATOM (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_FD_TYPE_NIL (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_STO_SET (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_STO_ADD (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_STO_REMOVE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_STO_SILENT (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_AUTH_AUTO (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_AUTH_LOGIN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_AUTH_PLAIN (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IMAP_AUTH_OAUTH2 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OAUTH2_FLOW_UNDEFINED (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OAUTH2_FLOW_AUTHCODE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_OAUTH2_FLOW_DEVICECODE (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IPVERSION_4 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IPVERSION_6 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_IPVERSION_6_4 (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_MessagePriorityToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_MessageEncodingToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_SmtpAuthToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_Pop3AuthToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_ImapAuthToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_ImapFetchDataTypeToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
      virtual HRESULT __stdcall raw_ImapStoreOptionToString (
        /*[in]*/ long lVal,
        /*[out,retval]*/ BSTR * strVal ) = 0;
};

//
// Wrapper method implementations
//

#include "g:\axemail\samples\visual c++\console applications\imap\release64\axemail.tli"

} // namespace AxEmail

#pragma pack(pop)
